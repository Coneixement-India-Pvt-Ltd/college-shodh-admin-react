i want you to fix my messed up frontend now


i will give you collegesPage 
and its 4 component 
that is card.jsx,filter.jsx,modal.jsx, pagination.jsx,
i want you to generate a prompt about whats going on by asking 4-5 questions first

and then we will intergerate our new apifeatures

collegespage:"const CollegesPage = () => {
  const [naacFilter, setNaacFilter] = useState([]);
  const [stateFilter, setStateFilter] = useState([]);
  const [nbaFilter, setNbaFilter] = useState([]);

  const onNaacChange = (selectedNaac) => {
    setNaacFilter((prevFilter) => {
      if (prevFilter.includes(selectedNaac)) {
        return prevFilter.filter((naac) => naac !== selectedNaac);
      } else {
        return [...prevFilter, selectedNaac];
      }
    });
  };

  const onStateChange = (selectedState) => {
    setStateFilter((prevFilter) => {
      if (prevFilter.includes(selectedState)) {
        return prevFilter.filter((state) => state !== selectedState);
      } else {
        return [...prevFilter, selectedState];
      }
    });
  };

  const onNbaFilter = (selectedNba) => {
    setNbaFilter((prevFilter) => {
      if (prevFilter.includes(selectedNba)) {
        return prevFilter.filter((nba) => nba !== selectedNba);
      } else {
        return [...prevFilter, selectedNba];
      }
    });
  };

  return (
    <div>
      {/* <Navbar />
      <Sidebar /> */}
      <Filter 
        onNaacChange={onNaacChange}
        onStateChange={onStateChange}
        onNbaFilter={onNbaFilter}
      />
      <Card 
        naacFilter={naacFilter}
        stateFilter={stateFilter}
        nbaFilter={nbaFilter}
      />
    </div>
  );
};"

card.jsx:"const Card = () => {
  const [colleges, setColleges] = useState([]);
  const [search, setSearch] = useState("");
  const [filterNaac, setFilterNaac] = useState("");
  const [sortOrder, setSortOrder] = useState("");
  const [selectedState, setSelectedState] = useState("");
  const [selectedCourse, setSelectedCourse] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(true); // Added loading state
  const collegesPerPage = 10;

  useEffect(() => {
    axios
      .get("http://localhost:8080/dashboard/college")
      .then((response) => {
        setColleges(response.data);
        setLoading(false); // Set loading to false after data is fetched
      })
      .catch((error) => {
        console.error(error);
        setLoading(false); // Ensure loading is false even if there's an error
      });
  }, []);

  const handleSortChange = (event) => {
    setSortOrder(event.target.value);
    const sortedColleges = [...colleges].sort((a, b) => {
      if (event.target.value === "lowToHigh") {
        return a.nirf - b.nirf;
      } else if (event.target.value === "highToLow") {
        return b.nirf - a.nirf;
      }
      return 0;
    });
    setColleges(sortedColleges);
  };

  const handleStateChange = (state) => {
    setSelectedState(state);
  };

  const handleCourseChange = (course) => {
    setSelectedCourse(course);
  };

  const filteredColleges = colleges.filter((college) => {
    const isStateMatch = selectedState
      ? college.address.toLowerCase().includes(selectedState.toLowerCase())
      : true;
    const isCourseMatch = selectedCourse
      ? college.course &&
        college.course.toLowerCase().includes(selectedCourse.toLowerCase())
      : true;
    return (
      (search === "" ||
        college.name.toLowerCase().includes(search.toLowerCase())) &&
      (!filterNaac || college.naac === filterNaac) &&
      isStateMatch &&
      isCourseMatch
    );
  });

  const totalPages = Math.ceil(filteredColleges.length / collegesPerPage);
  const displayedColleges = filteredColleges.slice(
    (currentPage - 1) * collegesPerPage,
    currentPage * collegesPerPage
  );

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const override = {
    display: "block",
    margin: "0 auto",
    borderWidth: "8px", // Adjust the border width to make the ring thicker
    marginTop: "-300px",
  };


  const handleDelete = async (id) => {
    try {
      await axios.delete(http://localhost:8080/dashboard/college/${id});
      // Remove the deleted listing from the state
      setColleges(colleges.filter(college => college._id !== id));
      toast.success('Listing deleted successfully');
    } catch (error) {
      console.error('Error deleting listing:', error);
      toast.error('Failed to delete listing');
    }
  };
    

  return (
    <div className="flex flex-col ml-64 mt-2 items-left mb-0">
      {loading ? (
        <div className="flex justify-center items-center h-full w-full mt-72">
          <HashLoader
            size={100}
            color={"orange"}
            loading={loading}
            cssOverride={override}
          />
        </div>
      ) : (
        displayedColleges.map((college) => (
          <div
            key={college._id}
            className="border-b border-gray-300 border rounded-lg p-2 pl-6 pr-6 mb-4 mr-32 ml-20 hover:shadow-2xl transition-shadow "
          >
            <h1 className="text-xl font-bold text-gray-900 text-left">
              {college.college_name}
            </h1>

            <div className="flex flex-wrap">
              <div className="w-1/2">
                <p
                  className="text-sm text-gray-600 mb-2 text-left flex items-center
                    "
                >
                  <IoLocationOutline className="text-orange-500 size-5 mr-1" />
                  <i> {college.address} </i>
                  {/* &nbsp;
                      {college.university} */}
                </p>

                <p className="text-sm text-gray-600 mb-1 text-left flex items-center">
                  <FaRegBuilding className="text-orange-500 size-5 mr-2" />{" "}
                  <b> Dept: {college.dept} </b>
                </p>
                <p className="text-sm text-gray-600 mb-1 text-left flex items-center">
                  <PiStudentFill className="text-orange-500 size-5 mr-2" />{" "}
                  Student Intake: {college.intake}
                </p>
                <p className="text-sm text-gray-600 mb-1 text-left flex items-center">
                  <FaPeopleGroup className="text-orange-500 size-5 mr-2" />{" "}
                  Faculty Count: {college.faculty}
                </p>

                <div className="text-sm text-gray-600 mb-1 text-left flex items-center ">
                  <IoNewspaperOutline className="text-orange-500 mr-1" />{" "}
                  Admission Criteria:
                  <p>{college.admission_criteria}</p>
                </div>
              </div>

              <div className="mt-7">
                <p className="text-sm text-blue-400 font-bold mb-1 text-left">
                  NIRF Rank: {college.nirf}
                </p>
                <p className="text-sm text-blue-400 font-bold mb-1 text-left">
                  NBA: {college.nba}
                </p>
                <p className="text-sm text-blue-400 font-bold mb-1 text-left">
                  NAAC: {college.naac}
                </p>
              </div>

              <hr className="w-full mb-2" />

              <div>
                <p className="text-sm text-gray-600 mb-1 text-left flex items-center">
                  <FaPhoneAlt className="mr-2 text-orange-400 size-4" />{" "}
                  {college.contact}
                </p>
                <p className="text-sm text-gray-600 mb-1 text-left flex items-center">
                  <MdEmail className="mr-2 text-orange-400 size-5" />{" "}
                  {college.email}
                </p>
              </div>

              <div className="flex justify-end mt-2 ml-auto mb-1 gap-1">
                {/* <Link to="/dashboard/edit/:id"> */}
                <Link to={/dashboard/edit/${college._id}}>
                  <Button
                    className="text-white rounded-lg p-2 w-24"
                    style={{ backgroundColor: "#53BD1E" }}
                  >
                    Edit
                  </Button>
                </Link>
                <Link>
                  <Button
                    variant="contained"
                    className="text-white rounded-lg p-2 w-24"
                    style={{ backgroundColor: "#F01E2C" }}
                    onClick={() => { handleDelete(college._id) } }
                  >
                    Delete
                  </Button>
                </Link>
                {/* <Link to={college.website}> */}
                <a
                  href={college.website}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <Button
                    className="text-white rounded-lg p-2 w-full"
                    style={{ backgroundColor: "#1F7FCF" }}
                  >
                    Know more
                  </Button>
                </a>
                {/* </Link> */}
              </div>
            </div>
          </div>
        ))
      )}

      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        onPageChange={handlePageChange}
      />
    </div>
  );
};"

filter.jsx:"function Filter() {
  const [stateOpen, setStateOpen] = useState(false);
  const [cityOpen, setCityOpen] = useState(false);
  const [naacOpen, setNaacOpen] = useState(false);
  const [accreditationOpen, setAccreditationOpen] = useState(false);

  // Refs for the dropdown containers
  const stateRef = useRef(null);
  const cityRef = useRef(null);
  const naacRef = useRef(null);
  const accreditationRef = useRef(null);
  
  const [showModal, setShowModal] = useState(false);
  const [selectedType, setSelectedType] = useState("BSc"); // Default to BSc

  const closeModal = () => setShowModal(false);
  const openModal = (type) => {
    setShowModal(true);
    setSelectedType(type);
  };
  // Close dropdowns if clicked outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (stateRef.current && !stateRef.current.contains(event.target)) {
        setStateOpen(false);
      }
      if (cityRef.current && !cityRef.current.contains(event.target)) {
        setCityOpen(false);
      }
      if (naacRef.current && !naacRef.current.contains(event.target)) {
        setNaacOpen(false);
      }
      if (accreditationRef.current && !accreditationRef.current.contains(event.target)) {
        setAccreditationOpen(false);
      }
    };

    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, []);

  return (
    <>
      <div className="ml-96 mt-20 p-4">
        {Options.map((option, index) => (
          <button
            className="h-12 w-32 bg-[#569df4] border border-black-100 rounded-md hover:drop-shadow-lg mr-6"
            key={index}
            onClick={() => {
              if (option.text === "B. Sc" || option.text === "BE/B. Tech") {
                openModal(option.text);
              } else {
                handleCourseChange(option.course);
              }
            }}
          >
            <span className="hover:underline text-white font-medium">
              {option.text}
            </span>
          </button>
        ))}
      </div>

      <div className="flex flex-wrap ml-80 justify-center sm:justify-start p-4 space-x-0 sm:space-x-2 gap-y-2 sm:gap-y-0 relative z-10 ">
        {/* State Dropdown */}
        <div className="relative" ref={stateRef}>
          <button
            className="rounded-none border border-gray-400 bg-white text-gray-700 px-4 py-2 text-left h-12 w-52 hover:bg-gray-100"
            onClick={() => setStateOpen(!stateOpen)}
          >
            Select State
          </button>
          {stateOpen && (
            <div className="absolute bg-white border rounded-md shadow-lg mt-2 w-full">
              <ul className="max-h-80 overflow-y-auto">
                {[
                  "Andhra Pradesh",
                  "Arunachal Pradesh",
                  "Assam",
                  "Bihar",
                  "Chhattisgarh",
                  "Goa",
                  "Gujarat",
                  "Haryana",
                  "Himachal Pradesh",
                  "Jharkhand",
                  "Karnataka",
                  "Kerala",
                  "Madhya Pradesh",
                  "Maharashtra",
                  "Manipur",
                  "Meghalaya",
                  "Mizoram",
                  "Nagaland",
                  "Odisha",
                  "Punjab",
                  "Rajasthan",
                  "Sikkim",
                  "Tamil Nadu",
                  "Telangana",
                  "Tripura",
                  "Uttar Pradesh",
                  "Uttarakhand",
                  "West Bengal",
                ].map((state, index) => (
                  <li key={index} className="px-2">
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" value={state} />
                      {state}
                    </label>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* City Dropdown */}
        <div className="relative" ref={cityRef}>
          <button
            className="rounded-none border border-gray-400 bg-white text-gray-700 px-4 py-2 text-left h-12 w-52 hover:bg-gray-100"
            onClick={() => setCityOpen(!cityOpen)}
          >
            Select City
          </button>
          {cityOpen && (
            <div className="absolute bg-white border rounded-md shadow-lg mt-2 w-full">
              <ul className="max-h-80 overflow-y-auto">
                {[
                  "Bangalore",
                  "Delhi",
                  "Mumbai",
                  "Pune",
                  "Hyderabad",
                  "Chennai",
                  "Kolkata",
                  "Ahmedabad",
                  "Jaipur",
                  "Lucknow",
                  "Kanpur",
                  "Indore",
                  "Coimbatore",
                  "Chandigarh",
                  "Thiruvananthapuram",
                  "Nagpur",
                  "Patna",
                  "Bhubaneswar",
                  "Visakhapatnam",
                  "Mysore",
                ].map((city, index) => (
                  <li key={index} className="px-2">
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" value={city} />
                      {city}
                    </label>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* NAAC Rating Dropdown */}
        <div className="relative" ref={naacRef}>
          <button
            className="rounded-none border border-gray-400 bg-white text-gray-700 px-4 py-2 text-left h-12 w-52 hover:bg-gray-100"
            onClick={() => setNaacOpen(!naacOpen)}
          >
            Select NAAC Rating
          </button>
          {naacOpen && (
            <div className="absolute bg-white border rounded-md shadow-lg mt-2 w-full">
              <ul className="max-h-80 overflow-y-auto">
                {["Naac A++", "Naac A+", "Naac A", "Naac B++", "Naac B+", "Naac B", "Naac C"].map(
                  (rating, index) => (
                    <li key={index} className="px-2">
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" value={rating} />
                        {rating}
                      </label>
                    </li>
                  )
                )}
              </ul>
            </div>
          )}
        </div>

        {/* Accreditation Dropdown */}
        <div className="relative" ref={accreditationRef}>
          <button
            className="rounded-none border border-gray-400 bg-white text-gray-700 px-4 py-2 text-left h-12 w-52 hover:bg-gray-100"
            onClick={() => setAccreditationOpen(!accreditationOpen)}
          >
            Select Accreditation
          </button>
          {accreditationOpen && (
            <div className="absolute bg-white border border-gray-300 rounded-md shadow-lg mt-2 w-full">
              <ul className="max-h-80 overflow-y-auto">
                {["Accredited", "Non-Accredited"].map(
                  (accreditation, index) => (
                    <li key={index} className="px-2">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          className="mr-2"
                          value={accreditation}
                        />
                        {accreditation}
                      </label>
                    </li>
                  )
                )}
              </ul>
            </div>
          )}
        </div>
        {showModal && <Modal closeModal={closeModal} type={selectedType} />}
      </div>
    </>
  );
}"


modal.jsx:"const Modal = ({ closeModal, type }) => {
  console.log(type);
  
  // Stop scrolling when the modal is open
  useEffect(() => {
    document.body.style.overflowY = "hidden"; // Hide scroll
    return () => {
      document.body.style.overflowY = "scroll"; // Back to normal scroll (cleanup function)
    };
  }, []);

  const bscCourses = [
    { name: "Physics", img: "/icons/BSC/Physics.jpg" },
    { name: "Chemistry", img: "/icons/BSC/Chemistry.jpg" },
    { name: "Biology", img: "/images/science.png" },
   ...etc
  ];

  const beCourses = [
    { name: "Computer Science", img: "/images/engineering.png" },
    { name: "Electrical Engineering", img: "/images/engineering.png" },
    { name: "Mechanical Engineering", img: "/images/engineering.png" },
   ,
   ...etc
  ];

  const courses = type === "BSc" ? bscCourses : beCourses;
  console.log("Selected courses:", courses);


  const [currentPage, setCurrentPage] = useState(0);
  const coursesPerPage = 6; // Number of courses to display per page

  const handleNext = () => {
    if ((currentPage + 1) * coursesPerPage < courses.length) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrev = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  const startIndex = currentPage * coursesPerPage;
  const endIndex = startIndex + coursesPerPage;
  const currentCourses = courses.slice(startIndex, endIndex);

  return (
    <>
      <div className="modal-wrapper" onClick={closeModal}></div>
      <div className="modal-container relative z-10 mt-28">
        <h1 className="font-mono">{type === "BSc" ? "B. Sc Courses" : "BE/B. Tech Courses"}</h1>
        <div className="course-grid">
          {currentCourses.map((course, index) => (
            <button className="model-btn" onClick={closeModal} key={index}>
              <img src={course.img} alt={course.name} />
              <span className="font-normal">{course.name}</span>
            </button>
          ))}
        </div>
        <div className="pagination">
          <button onClick={handlePrev} disabled={currentPage === 0}>
            &lt; Prev
          </button>
          <button onClick={handleNext} disabled={endIndex >= courses.length}>
            Next &gt;
          </button>
        </div>
      </div>
    </>
  );
};"
pagination.jsx:"const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  const pageNumbers = [];
  const maxPageNumbersToShow = 5; // Number of page numbers to display at once
  let startPage, endPage;

  if (totalPages <= maxPageNumbersToShow) {
    // If total pages are less than or equal to maxPageNumbersToShow, show all pages
    startPage = 1;
    endPage = totalPages;
  } else {
    // Determine start and end page based on the current page
    const middlePage = Math.ceil(maxPageNumbersToShow / 2);
    if (currentPage <= middlePage) {
      startPage = 1;
      endPage = maxPageNumbersToShow;
    } else if (currentPage + middlePage - 1 >= totalPages) {
      startPage = totalPages - maxPageNumbersToShow + 1;
      endPage = totalPages;
    } else {
      startPage = currentPage - middlePage + 1;
      endPage = currentPage + middlePage - 1;
    }
  }

  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.push(i);
  }

  return (
    <ol className="flex justify-center gap-1 text-xs font-medium mb-5">
      <li>
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className={inline-flex size-8 items-center justify-center rounded border border-gray-100 bg-white text-gray-900 ${currentPage === 1 ? 'cursor-not-allowed opacity-50' : ''}}
        >
          <span className="sr-only">Prev Page</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-3 w-3"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
              clipRule="evenodd"
            />
          </svg>
        </button>
      </li>

      {pageNumbers.map(number => (
        <li key={number}>
          <button
            onClick={() => onPageChange(number)}
            className={block size-8 rounded border text-center leading-8 ${currentPage === number ? 'border-blue-600 bg-blue-600 text-white' : 'border-gray-100 bg-white text-gray-900'}}
          >
            {number}
          </button>
        </li>
      ))}

      <li>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className={inline-flex size-8 items-center justify-center rounded border border-gray-100 bg-white text-gray-900 ${currentPage === totalPages ? 'cursor-not-allowed opacity-50' : ''}}
        >
          <span className="sr-only">Next Page</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-3 w-3"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
              clipRule="evenodd"
            />
          </svg>
        </button>
      </li>
    </ol>
  );
};"